// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContentType {
  title
  subtitle
  paragraph
  list
  image
  video
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String?
  created_at     DateTime @default(now()) @db.Timestamptz(3)
  updated_at     DateTime @default(now()) @updatedAt @db.Timestamptz(3)
  user_id        String   @unique @default(uuid())
  email_verified Boolean? @default(false)
  phone_verified Boolean? @default(false)
  phone          String?

  // Relationships
  posts Post[] // One-to-many post 
}

model Post {
  id          Int      @id @default(autoincrement())
  user_id     Int?
  created_at  DateTime @default(now()) @db.Timestamptz(3)
  updated_at  DateTime @updatedAt @db.Timestamptz(3)
  description String? // Optional description for metadat

  // Relationships
  User          User?          @relation(fields: [user_id], references: [id])
  content_block ContentBlock[] // One-to-many ContentBlock
  comments      Comment[] // One-to-many comments
  PostTag       PostTag[]
}

model ContentBlock {
  id            Int         @id @default(autoincrement())
  content_order Int
  content_type  ContentType
  content_data  String

  // Relatitonships
  post     Post   @relation(fields: [post_id], references: [id])
  post_id  Int
  media    Media? @relation(fields: [media_id], references: [id])
  media_id Int?   @unique
}

model Media {
  id          Int      @id @default(autoincrement())
  url         String
  media_type  String
  description String
  created_at  DateTime @default(now()) @db.Timestamptz(3)

  // Relationships
  contentBlock ContentBlock?
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  email      String
  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt @db.Timestamptz(3)

  // Relationships
  post    Post @relation(fields: [post_id], references: [id])
  post_id Int
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  postTag PostTag[] // Many-to-many with Post via PostTag
}

model PostTag {
  post_id Int
  tag_id  Int
  post    Post @relation(fields: [post_id], references: [id])
  tag     Tag  @relation(fields: [tag_id], references: [id])

  // Relationships
  @@id([post_id, tag_id])
}
